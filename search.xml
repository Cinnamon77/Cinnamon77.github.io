<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>4.7Friday</title>
      <link href="/2023/04/07/4-7Friday/"/>
      <url>/2023/04/07/4-7Friday/</url>
      
        <content type="html"><![CDATA[<p>   今天有点烦躁，我想应该没有喜欢他。喜欢感觉很奇妙，可能总不能因为，名字最后一个字和林骏明一样，就产生感觉吧。</p><p>  那可能是因为是同班同学，可能是享受被照顾，陪伴的感觉，也可能只是单纯的太无聊了。</p><p>我想我需要一个清晰的对未来的规划了。</p><p>  我需要问问自己到底想要什么。</p><p>  我非常渴望爱情，可是爱情是奢侈品。爱人先爱己。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘抄</title>
      <link href="/2023/03/29/post/"/>
      <url>/2023/03/29/post/</url>
      
        <content type="html"><![CDATA[<p>”社会中的男性更倾向于快速征服女性的短期策略，而女性思维则倾向于长期策略，选择和一个有责任心，忠诚能帮助抚养孩子的男人结婚”——叔本华</p><p>“占有欲和神秘感始终是男人的天性。”——叔本华</p><p>“人生就像钟摆，不断在痛苦和无聊之间摇摆。”——叔本华</p><p>婚姻的意义：我愿意和那个人一起享受生活，一起做平常的事情，而那些事情本身就是意义所在。</p><p>武士道精神：勇气、忠诚、荣誉、诚实、自我控制和礼仪</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大学物理</title>
      <link href="/2023/03/29/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/"/>
      <url>/2023/03/29/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 校内课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校内课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>post</title>
      <link href="/2023/03/27/3.27/"/>
      <url>/2023/03/27/3.27/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>recording</title>
      <link href="/2023/03/25/recording/"/>
      <url>/2023/03/25/recording/</url>
      
        <content type="html"><![CDATA[<p>  No matter what people perceive of me, I always shine through at the end of the day. So I’ve had a lot of people try to tear me down. But I’m here. And I’ve always been </p><p>myself, and I’ve always wanted that, and I’ve been graceful, and I’ve tried to handle myself with as much class. And it’s only because I know how hard I work. And I’m not gonna let any of that get to me.</p><p>  男人除了ljm都是shit，我要赚钱买一辆红色跑车，就要，法拉利。</p><ul><li><p>Always ask yourself, “Are you doing your best?”</p></li><li><p>万木霜天红烂漫，天兵怒气重霄汉。</p><p>化逃避为平衡，跳出二元思维陷阱</p><p>阿尼玛和阿尼姆斯</p><p>二元性(人性和狼性)</p><p>“你连舞都不想跳，怎么能说已经做出极大努力去生活呢。”——《荒原狼》(赫尔曼黑塞)</p><p>用幽默接受每一种人格</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2023/03/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/03/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>(1)”key:value”</p><p>(2)key&#x3D;[{},{},{}]</p><p>数组下标从0开始</p><p>（3）vscode可在右上… 处找到格式化 ctrl+Alt+b</p><p>（4）\n    \r    \n\r    为换行，选择取决于json解释器</p><p>（5）&quot; 转义引号</p><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><p>是什么：代码库或接口层(介于内核和应用程序之间)</p><p>IP：具体到电脑</p><p>端口：具体到进程</p><p>面向不同协议&#x3D;&#x3D;面向不同对象</p><p>协议：TCP ICMP UDP</p><h3 id="sock-数据结构"><a href="#sock-数据结构" class="headerlink" title="sock 数据结构"></a>sock 数据结构</h3><p>tcp_sock (以inet_connection_sock()为基础，加入滑动窗口）</p><p>常用API：send()    recv()    bind()    listen()    connect()    </p><p>由socket提供</p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>前端——&gt;(API)——&gt;后端</p><p>进程——&gt;(socket)——&gt;内核</p><p>Linux:应用程序和内核</p><p>socket进程对比TCP</p><p>建立链接</p><p>connect(sock_fd,IP:port)</p><p>传输数据</p><p>缓冲区：链表</p><p>send(sock_fd,消息)</p><p>recv(sock_fd) 将数据由缓冲区转移至应用程序</p><p>四元组：发送方IP，发送方port，接收方port,接收方IP</p><p>四元组——&gt;Hash函数——&gt; Hash Key</p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>建立链接</p><p>传输数据</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>informal essay</title>
      <link href="/2023/03/23/3-23/"/>
      <url>/2023/03/23/3-23/</url>
      
        <content type="html"><![CDATA[<p>   jm好像，把他的头发剪短了。至少两边短了。我在四楼的北区，每天，都被图书馆的隔板遮挡视线。能不能某一天，坐在一起呢。我最近要控制体重了，早点下到99。他的blog很久没有更新了。</p><p>  我最近喜欢上爵士乐，猫王的歌似乎刻在了我的灵魂中。“For I still recall the summer sun, through all winter rain”.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>要去的地方</title>
      <link href="/2023/03/21/%E8%A6%81%E5%8E%BB%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
      <url>/2023/03/21/%E8%A6%81%E5%8E%BB%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<p>比利时布鲁日</p><p>悬崖</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>快捷键</title>
      <link href="/2023/03/21/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/03/21/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>alt+F4 关闭页面</p><p>win+d 最小化</p><h2 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h2><p>import os</p><p>os.system(‘cls’)</p><h2 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h2><p>ctrl+d 复制一行</p><p>ctrl+shift+v 显示剪切板历史记录</p><p>Ctrl + Shift + F10 可以运行当前文件</p><p>Shift + F10 可以运行上一次运行的配置</p><p>Ctrl+Alt+F7 打开文件夹</p><p>Ctrl+slash 单行注释</p><p>Ctrl +slash +shift 多行注释</p><p>Ctrl + w 扩展代码选择</p><ol><li><p>常规操作：</p><ul><li>Ctrl + S：保存文件</li><li>Ctrl + C：复制选中的文本</li><li>Ctrl + X：剪切选中的文本</li><li>Ctrl + V：粘贴文本</li><li>Ctrl + Z：撤销上一次操作</li><li>Ctrl + Shift + Z：重做上一次操作</li><li>Ctrl + F：查找文本</li><li>Ctrl + Shift + F：查找和替换文本</li><li>Ctrl + A：选中所有文本</li><li>Ctrl + D：复制当前行或选中的文本</li><li>Ctrl + Shift + U：将选中的文本转换为大写或小写</li><li>Ctrl + &#x2F;：注释或取消注释选中的代码</li></ul></li><li><p>编辑器操作：</p><ul><li>Ctrl + Space：代码自动完成</li><li>Ctrl + Alt + L：格式化代码</li><li>Ctrl + Alt + O：优化导入语句</li><li>Ctrl + B：跳转到定义</li><li>Ctrl + Alt + B：跳转到实现</li><li>Ctrl + E：打开最近的文件</li><li>Ctrl + Shift + T：在当前编辑器中打开类的测试代码</li><li>Ctrl + Shift + F10：运行上次运行的程序</li><li>Ctrl + Shift + F9：调试上次运行的程序</li></ul></li><li><p>项目导航：</p><ul><li>Alt + 1：打开&#x2F;关闭项目工具窗口</li><li>Alt + 4：打开&#x2F;关闭控制台窗口</li><li>Alt + 7：打开&#x2F;关闭结构视图窗口</li><li>Alt + F1：在项目工具窗口中显示当前文件</li><li>Ctrl + Shift + N：打开文件或目录</li></ul></li><li><p>安装PyCharm：您可以从JetBrains官网上下载适合您操作系统的PyCharm版本，并按照安装向导进行安装。</p></li><li><p>创建新项目：启动PyCharm后，单击“Create New Project”按钮创建一个新项目。在弹出的“New Project”对话框中，设置项目名称和存储位置，并选择Python解释器。如果您的系统中已经安装了多个Python版本，请确保选择正确的解释器版本。单击“Create”按钮创建新项目。</p></li><li><p>创建新文件：在项目中创建新文件，可以使用右键单击项目名称，选择“New”-&gt;“Python File”命令，或者单击主菜单上的“File”-&gt;“New”-&gt;“Python File”命令。输入文件名并单击“OK”按钮创建新文件。</p></li><li><p>编写代码：在新文件中，您可以编写Python代码。如果您不熟悉Python语言，可以使用PyCharm的代码自动完成和语法检查功能。只需输入代码的一部分，PyCharm就会提供有关该代码的建议和自动完成选项。</p></li><li><p>运行代码：要运行Python代码，可以使用菜单上的“Run”-&gt;“Run”命令或按下Shift + F10键。PyCharm会自动检测代码中的错误并运行它。您可以在控制台窗口中查看代码的输出结果。</p></li><li><p>调试代码：如果您需要调试Python代码，可以使用菜单上的“Run”-&gt;“Debug”命令或按下Shift + F9键。这将启动调试器并允许您逐行执行代码，并查看代码的变量和数据结构的值。</p></li><li><p>版本控制：PyCharm还可以与版本控制系统（如Git和Subversion）集成，帮助您管理代码库并进行版本控制。您可以使用PyCharm的“VCS”菜单中的命令来执行版本控制操作，如拉取和提交代码更改。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/2023/03/21/python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/21/python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="cs6b1"><a href="#cs6b1" class="headerlink" title="cs6b1"></a>cs6b1</h2><p>（1）diagram </p><p>Frames Objects</p><p>（2）An environment is a sequence of frames.</p><p>A frame is a binding between names and values.</p><p>（3）Look for fitst in the local frame; second in the global frame.</p><p>   (4)   pure functions: just return values</p><p>           non-pure functions: have side effects</p><p>(5) &#x2F; 除  truediv(a,b)   a&#x2F;b</p><p>  &#x2F;&#x2F;  整除  floordiv(a,b)  a&#x2F;&#x2F;b</p><p>(6) false value: False ,0,’ ‘,None</p><p>      true value: anything else</p><p>(7)def search(f):<br>    x&#x3D;0<br>    while True:<br>        if f(x):<br>            return x<br>        x+&#x3D;1  </p><p>def inverse(f):<br>    return lambda y:search(lambda x:f(x)&#x3D;&#x3D;y)  </p><p>def square(x):<br>    return x**2  </p><p>sqrt&#x3D;inverse(square)  </p><p>print(sqrt(4))</p><p>(8)def indentity(k):<br>    return k  </p><p>def cube(k):<br>    return pow(k,3)  </p><p>def summation(n,term):<br>    total,k&#x3D;0,1<br>    while k&lt;&#x3D;n:<br>        total,k&#x3D;total+term(k),k+1<br>    return total  </p><p>print(summation(5,cube))<br>print(summation(5,indentity))</p><p>(9)higher-order function</p><p>def make_adder(n):<br>    def adder(m):<br>        return 2*m+n<br>    return adder  </p><p>f&#x3D;make_adder(1)<br>print(f(2))</p><p>(10) currying: Transforming a multi-argument function into a single-argument, higher-order function</p><p>def curry2(f):<br>    def g(x):<br>        def h(y):<br>            return f(x,y)<br>        return h<br>    return g  </p><p>from operator import add<br>m&#x3D;curry2(add)  </p><p>add_three&#x3D;m(3)<br>add_two&#x3D;add_three(2)<br>print(add_two)  </p><p>curry2&#x3D;lambda f: lambda x: lambda y: f(x,y)<br>m1&#x3D;curry2(add)<br>m(2)(3)  </p><p>print(m(2)(3))</p><p>(11)name: 1) meaning or purpose</p><p>                   2) documented in docstring</p><p>                   3) function effect(print), behavior(triple), return(abs)</p><p>(12)cascade(the order of recursion)</p><p>first type:</p><p>def cascade(n):<br>    if n&lt;10:<br>        print(n)<br>    else:<br>        print(n)<br>        cascade(n&#x2F;&#x2F;10)<br>        print(n)</p><p>second type:</p><p>def cascade(n):<br>    print(n)<br>    if n&gt;&#x3D;10:<br>        cascade(n&#x2F;&#x2F;10)<br>        print(n)</p><p>first type has typical structure, put the base case first</p><p>inverse_cascade</p><p>def inverse_cascade(n):<br>    grow(n)<br>    print(n)<br>    shrink(n)  </p><p>def f_then_g(f,g,n):<br>    if n:<br>        f(n)<br>        g(n)  </p><p>grow&#x3D;lambda n:f_then_g(grow,print,n&#x2F;&#x2F;10)<br>shrink&#x3D;lambda n:f_then_g(print,shrink,n&#x2F;&#x2F;10)</p><h2 id="oop"><a href="#oop" class="headerlink" title="oop"></a>oop</h2><h4 id="types"><a href="#types" class="headerlink" title="types:"></a>types:</h4><p>(1)Single Inheritance</p><p>(2)Multiple Inheritance</p><p>(3)Multilevel Inheritance</p><p>(4)Hierarchical Inheritance</p><p>(5)Hybrid Inheritance</p><h2 id="Data-structure"><a href="#Data-structure" class="headerlink" title="Data structure"></a>Data structure</h2><p>list :append()加一个或者一个list</p><p>insert(position,item)</p><p>extend([]) </p><p>tuple:+连接</p><p>列表推导式 [表达式 for 迭代变量 in 可迭代变量[if 条件表达式]]（list comprehension)</p><p>两层循环 [(x,y) for x in range(1,4) for y in range(1,5)]</p><p>运行时间：</p><p>import time</p><p>s_time&#x3D;time.perf_counter()<br>demo1()<br>e_time&#x3D;time.perf_counter()  </p><p>print(“运行时间：”,e_time-s_time)</p><p>dictionary中不能有重复key，会覆盖</p>]]></content>
      
      
      <categories>
          
          <category> cs学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.21</title>
      <link href="/2023/03/21/3-21/"/>
      <url>/2023/03/21/3-21/</url>
      
        <content type="html"><![CDATA[<p>很喜欢村上春树的文字，最喜欢且听风吟</p><p>simple but powerful</p><p>“回家路上，我一直吹着口哨。这是一支不知在哪里听过的曲子，但名字却总也记不起来。是很久<br>以前的老歌了。我把车停在海滨公路上，一面望着黑夜中的大海，一面竭力想那歌名。<br>是《米老鼠俱乐部之歌》。歌词我想是这样的：<br>我们大家喜欢的口令，MIC KEY MOUSE<br>说不定真的算是不错的时代。”</p><h1 id="且听风吟的歌单："><a href="#且听风吟的歌单：" class="headerlink" title="且听风吟的歌单："></a>且听风吟的歌单：</h1><p>米老鼠俱乐部之歌</p><p>佐治亚的雨夜</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/2023/03/15/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2023/03/15/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;</code></pre><p>万能头文件</p><h1 id="区间选点"><a href="#区间选点" class="headerlink" title="区间选点"></a>区间选点</h1><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N=100010;struct node&#123;    int l,r;&#125;range[N];bool cmp(node a,node b)&#123;    return a.r&lt;b.r;&#125;int main()&#123;    int n;cin&gt;&gt;n;    for(int i=0;i&lt;n;++i)    &#123;        scanf(&quot;%d %d&quot;,&amp;range[i].l,&amp;range[i].r);    &#125;    sort(range,range+n,cmp);    int res=0,ed=-2e9;    for(int i=0;i&lt;n;i++)    &#123;        if(range[i].l&gt;ed)        &#123;            res++;            ed=range[i].r;        &#125;    &#125;    cout&lt;&lt;res&lt;&lt;endl;&#125;</code></pre><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1010;int n, m;int v[N], w[N];int f[N];int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i];    for (int i = 1; i &lt;= n; i ++ )        for (int j = v[i]; j &lt;= m; j ++ )            f[j] = max(f[j], f[j - v[i]] + w[i]);    cout &lt;&lt; f[m] &lt;&lt; endl;    return 0;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3.15星期三</title>
      <link href="/2023/03/15/3-15%E6%98%9F%E6%9C%9F%E4%B8%89/"/>
      <url>/2023/03/15/3-15%E6%98%9F%E6%9C%9F%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>不知道说些什么，周三时间很充裕，应该好好学习。不过今天有点烦吧，昨天英语小测没带耳机，得了64，今天早上高数不会，物理实验小测得了60。</p><p>他也在图书馆，不知道为什么今天他的位置换了方向，是为了不看到我吗，应该是我想多了。</p><p>今天有体测，结束去健身房，然后回来刷leetcode。我要好好学习了吧，有点摆烂最近。</p><p>也许慢慢来，会接近他？（这句话可真ex）算了，打会音游。物理实验，让我的屁股着火（LOL）。</p><p>无所谓，我会用平面镜欣赏，我的美貌。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/03/14/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/03/14/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><h4 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h4><pre><code class="cpp">#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 1005;int v[MAXN];    // 体积int w[MAXN];    // 价值 int f[MAXN][MAXN];  // f[i][j], j体积下前i个物品的最大价值 int main() &#123;    int n, m;       cin &gt;&gt; n &gt;&gt; m;    for(int i = 1; i &lt;= n; i++)         cin &gt;&gt; v[i] &gt;&gt; w[i];    for(int i = 1; i &lt;= n; i++)         for(int j = 1; j &lt;= m; j++)        &#123;            //  当前背包容量装不进第i个物品，则价值等于前i-1个物品            if(j &lt; v[i])                 f[i][j] = f[i - 1][j];            // 能装，需进行决策是否选择第i个物品            else                    f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i]);        &#125;               cout &lt;&lt; f[n][m] &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="一维优化"><a href="#一维优化" class="headerlink" title="一维优化"></a>一维优化</h4><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1010;int n, m;int v[N], w[N];int f[N];int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i];    for (int i = 1; i &lt;= n; i ++ )        for (int j = m; j &gt;= v[i]; j -- )            f[j] = max(f[j], f[j - v[i]] + w[i]);    cout &lt;&lt; f[m] &lt;&lt; endl;    return 0;&#125;</code></pre><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><pre><code class="cpp">#include&lt;iostream&gt;using namespace std;const int N = 1010;int f[N];int v[N],w[N];int main()&#123;    int n,m;    cin&gt;&gt;n&gt;&gt;m;    for(int i = 1 ; i &lt;= n ;i ++)    &#123;        cin&gt;&gt;v[i]&gt;&gt;w[i];    &#125;    for(int i = 1 ; i&lt;=n ;i++)    for(int j = v[i] ; j&lt;=m ;j++)    &#123;            f[j] = max(f[j],f[j-v[i]]+w[i]);    &#125;    cout&lt;&lt;f[m]&lt;&lt;endl;&#125;</code></pre><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>暴力解法</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 110;int n, m;int v[N], w[N], s[N];int f[N][N];int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];    for (int i = 1; i &lt;= n; i ++ )        for (int j = 0; j &lt;= m; j ++ )            for (int k = 0; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k ++ )                f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k);    cout &lt;&lt; f[n][m] &lt;&lt; endl;    return 0;&#125;</code></pre><p>二进制优化法</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 12010, M = 2010;int n, m;int v[N], w[N];int f[M];int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    int cnt = 0;    for (int i = 1; i &lt;= n; i ++ )    &#123;        int a, b, s;        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;        int k = 1;        while (k &lt;= s)        &#123;            cnt ++ ;            v[cnt] = a * k;            w[cnt] = b * k;            s -= k;            k *= 2;        &#125;        if (s &gt; 0)        &#123;            cnt ++ ;            v[cnt] = a * s;            w[cnt] = b * s;        &#125;    &#125;    n = cnt;    for (int i = 1; i &lt;= n; i ++ )        for (int j = m; j &gt;= v[i]; j -- )            f[j] = max(f[j], f[j - v[i]] + w[i]);    cout &lt;&lt; f[m] &lt;&lt; endl;    return 0;&#125;</code></pre><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><pre><code class="cpp">#include&lt;iostream&gt;using namespace std;const int N = 110;int n,m;int f[N],s[N],v[N][N],w[N][N];int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i = 1;i &lt;= n;i ++)    &#123;        cin&gt;&gt;s[i];        for(int j = 0;j &lt; s[i];j++)        &#123;            cin&gt;&gt;v[i][j]&gt;&gt;w[i][j];        &#125;    &#125;    for(int i = 1;i &lt;= n;i ++)    &#123;        for(int j = m;j &gt;= 0;j --)        &#123;            for(int k = 0;k &lt; s[i];k ++)            &#123;                if(v[i][k]&lt;=j)                &#123;                    f[j] = max(f[j],f[j-v[i][k]] + w[i][k]);                &#125;            &#125;        &#125;    &#125;    printf(&quot;%d&quot;,f[m]);&#125;</code></pre><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><h3 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h3><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;const int N = 510;int f[N][N],a[N][N];//状态表示方程int n;int main()&#123;    cin&gt;&gt;n;    memset(f,0xcf,sizeof f);    for(int i = 1;i &lt;= n;i ++)    &#123;        for(int j = 1;j &lt;= i;j ++)        &#123;            scanf(&quot;%d&quot;,&amp;a[i][j]);        &#125;    &#125;    f[1][1] = a[1][1];    for(int i = 2;i &lt;= n;i ++)    &#123;        for(int j = 1;j &lt;= n;j ++)        &#123;            f[i][j] = max(f[i-1][j-1]+a[i][j],f[i-1][j]+a[i][j]);        &#125;    &#125;    int res = -1e9;    for(int i = 1;i &lt;= n;i ++)    &#123;        res = max(res,f[n][i]);    &#125;    printf(&quot;%d&quot;,res);&#125;</code></pre><h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><pre><code class="cpp">//f[i] = max(f[j]+1,f[i]);#include&lt;iostream&gt;using namespace std;const int N = 1010;int n;int a[N],f[N];int main()&#123;    cin&gt;&gt;n;    for(int i = 1;i &lt;= n;i ++) scanf(&quot;%d&quot;,&amp;a[i]);    for(int i = 1;i &lt;= n;i ++)    &#123;        f[i] = 1;        for(int j = 1;j &lt; i;j ++)        &#123;            if(a[j] &lt; a[i])            &#123;                f[i] = max(f[i],f[j] + 1);             &#125;        &#125;    &#125;    int res = 1;    for(int i = 1;i &lt;= n;i ++)    &#123;        res = max(res,f[i]);    &#125;    printf(&quot;%d&quot;,res);&#125;</code></pre><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><pre><code class="cpp">#include&lt;iostream&gt;using namespace std;const int N = 1010;int n,m;char a[N],b[N];int f[N][N];int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    cin&gt;&gt;a+1&gt;&gt;b+1;    for(int i = 1;i &lt;= n;i ++)    &#123;        for(int j = 1;j &lt;= m;j ++)        &#123;            f[i][j] = max(f[i-1][j],f[i][j-1]);            if(a[i] == b[j])            &#123;                f[i][j] = max(f[i-1][j-1] + 1,f[i][j]);            &#125;        &#125;    &#125;    printf(&quot;%d&quot;,f[n][m]);    return 0;&#125;</code></pre><h2 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h2><h3 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h3><pre><code class="cpp">//区间dp#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;const int N = 310;int n;int a[N],s[N];int f[N][N];int main()&#123;       cin&gt;&gt;n;    for(int i =1;i &lt;= n;i ++)    &#123;        scanf(&quot;%d&quot;,&amp;a[i]);        s[i] = s[i-1] + a[i];    &#125;    memset(f,0x3f,sizeof f);    for(int i = 1;i &lt;=n;i ++) f[i][i] = 0;    for(int len = 1;len &lt;= n;len ++)    &#123;        for(int i = 1;i + len -1 &lt;= n;i ++)        &#123;            int l = i, r = i + len -1;            for(int k = l;k &lt; r;k ++)            &#123;                f[l][r] = min(f[l][r],f[l][k]+f[k+1][r] + s[r] - s[l-1] );            &#125;        &#125;    &#125;    printf(&quot;%d&quot;,f[1][n]);&#125;</code></pre><h2 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h2><h3 id="蒙德里安的梦想"><a href="#蒙德里安的梦想" class="headerlink" title="蒙德里安的梦想"></a>蒙德里安的梦想</h3><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;const int N = 12,M = 1 &lt;&lt; N;long long f[N][M];bool vis[M];vector&lt;int&gt; state[M];int n,m;int main()&#123;    while(cin&gt;&gt;n&gt;&gt;m , n||m)    &#123;        //预处理1        for(int i = 0;i &lt; (1 &lt;&lt; n);i ++)        &#123;            int cnt = 0;            bool is_valid = true;            for(int j = 0;j &lt; n;j ++)            &#123;                if((i &gt;&gt; j )&amp; 1 )                &#123;                    if(cnt &amp; 1)                    &#123;                        is_valid = false;                        break;                    &#125;                    cnt = 0;                &#125;else                &#123;                    cnt ++;                &#125;            &#125;            if( cnt &amp; 1 )                &#123;                    is_valid = false;                &#125;            vis[i] = is_valid;        &#125;        //预处理2        for(int j = 0; j &lt; (1 &lt;&lt; n);j ++)        &#123;            state[j].clear();            for(int k = 0; k &lt; (1 &lt;&lt; n);k ++)            &#123;                if((j &amp; k) == 0 &amp;&amp; vis[j | k])                &#123;                    state[j].push_back(k);                &#125;            &#125;        &#125;        //dp        memset(f,0,sizeof f);        f[0][0] = 1;        for(int i = 1;i &lt;= m;i ++)        &#123;            for(int j = 0;j &lt; (1 &lt;&lt; n);j ++)            &#123;                for(auto k : state[j])                &#123;                    f[i][j] += f[i-1][k];                &#125;            &#125;        &#125;        cout&lt;&lt;f[m][0]&lt;&lt;endl;    &#125;&#125;</code></pre><h3 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h3><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N = 21, M = 1 &lt;&lt; N;int w[N][N],f[M][N];int n;int main()&#123;    cin&gt;&gt;n;    for(int i = 0;i &lt; n;i ++)    &#123;        for(int j = 0;j &lt; n;j ++)        &#123;            scanf(&quot;%d&quot;,&amp;w[i][j]);        &#125;    &#125;    memset(f,0x3f,sizeof f);    f[1][0] = 0;    for(int i = 0;i &lt; (1 &lt;&lt; n);i ++)    &#123;        for(int j = 0;j &lt; n;j ++)        &#123;            if((i &gt;&gt; j) &amp; 1)            &#123;                for(int k = 0;k &lt; n;k ++)                &#123;                    if((i - (1 &lt;&lt; j)) &gt;&gt; k &amp; 1)                    &#123;                        f[i][j] = min(f[i][j],f[i - (1 &lt;&lt; j)][k] + w[k][j]);                    &#125;                &#125;            &#125;        &#125;    &#125;    cout&lt;&lt;f[(1 &lt;&lt; n) - 1][n - 1]&lt;&lt; endl;&#125;</code></pre><h2 id="树状dp"><a href="#树状dp" class="headerlink" title="树状dp"></a>树状dp</h2><h3 id="没有上司的舞会"><a href="#没有上司的舞会" class="headerlink" title="没有上司的舞会"></a>没有上司的舞会</h3><pre><code class="cpp"></code></pre><h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><h3 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h3><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int N=310;int f[N][N],g[N][N];int n,m;int dx[4]=&#123;-1,0,1,0&#125;,dy[4]=&#123;0,-1,0,1&#125;;int dp(int x,int y)&#123;    int &amp;v=f[x][y];    if(v!=-1)return v;    v=1;        for(int i=0;i&lt;4;i++)    &#123;        int a=x+dx[i],b=y+dy[i];        if(a&gt;=1&amp;&amp;a&lt;=n&amp;&amp;b&gt;=1&amp;&amp;b&lt;=m&amp;&amp;g[x][y]&gt;g[a][b])        v=max(v,dp(a,b)+1);    &#125;    return v;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;        for(int i=1;i&lt;=n;i++)        for(int j=1;j&lt;=m;j++)            cin&gt;&gt;g[i][j];                memset(f,-1,sizeof f);        int res=0;    for(int i=1;i&lt;=n;i++)        for(int j=1;j&lt;=m;j++)            res=max(res,dp(i,j));                printf(&quot;%d&quot;,res);&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cinnamon生活随笔</title>
      <link href="/2023/03/14/Cinnamon%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
      <url>/2023/03/14/Cinnamon%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h1 id="写在大一下"><a href="#写在大一下" class="headerlink" title="写在大一下"></a>写在大一下</h1><p>  我感觉北邮的生活还是一如既往的单调，却因为你的出现让生活有了期待。</p><p>我喜欢计算机，编程，算法，想做一名极客，也想和你一起进步。</p><p>”大雾重重</p><p>时代喧哗造物忙</p><p>火光汹汹</p><p>指引盗寇入太行“。其实我还不太明白，只是知道你喜欢。</p><p>我不想追，慢慢来，顺心而为。</p><p>这个Blog来记录学习过程和大学生活，以及我暗恋的你。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的·第一篇博客</title>
      <link href="/2023/03/14/%E6%88%91%E7%9A%84%C2%B7%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/03/14/%E6%88%91%E7%9A%84%C2%B7%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是我的第一篇Hexo 博客文章</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ljy</title>
      <link href="/2023/03/08/hello-world/"/>
      <url>/2023/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
