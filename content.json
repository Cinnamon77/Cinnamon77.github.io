{"meta":{"title":"李佳奕的blog","subtitle":"","description":"无为而治","author":"李佳奕","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-03-11T02:38:32.000Z","updated":"2023-03-29T09:46:31.675Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":"cs学习 校内课程"},{"title":"分类","date":"2023-03-11T02:38:51.000Z","updated":"2023-04-07T09:34:13.782Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":"cs学习 校内课程 随笔"}],"posts":[{"title":"4.7Friday","slug":"4-7Friday","date":"2023-04-07T09:33:44.000Z","updated":"2023-04-07T09:41:00.911Z","comments":true,"path":"2023/04/07/4-7Friday/","link":"","permalink":"http://example.com/2023/04/07/4-7Friday/","excerpt":"","text":"今天有点烦躁，我想应该没有喜欢他。喜欢感觉很奇妙，可能总不能因为，名字最后一个字和林骏明一样，就产生感觉吧。 那可能是因为是同班同学，可能是享受被照顾，陪伴的感觉，也可能只是单纯的太无聊了。 我想我需要一个清晰的对未来的规划了。 我需要问问自己到底想要什么。 我非常渴望爱情，可是爱情是奢侈品。爱人先爱己。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"摘抄","slug":"post","date":"2023-03-29T14:59:17.000Z","updated":"2023-04-02T01:48:55.981Z","comments":true,"path":"2023/03/29/post/","link":"","permalink":"http://example.com/2023/03/29/post/","excerpt":"","text":"”社会中的男性更倾向于快速征服女性的短期策略，而女性思维则倾向于长期策略，选择和一个有责任心，忠诚能帮助抚养孩子的男人结婚”——叔本华 “占有欲和神秘感始终是男人的天性。”——叔本华 “人生就像钟摆，不断在痛苦和无聊之间摇摆。”——叔本华 婚姻的意义：我愿意和那个人一起享受生活，一起做平常的事情，而那些事情本身就是意义所在。 武士道精神：勇气、忠诚、荣誉、诚实、自我控制和礼仪","categories":[],"tags":[]},{"title":"大学物理","slug":"大学物理","date":"2023-03-29T09:45:49.000Z","updated":"2023-03-29T09:47:22.490Z","comments":true,"path":"2023/03/29/大学物理/","link":"","permalink":"http://example.com/2023/03/29/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/","excerpt":"","text":"","categories":[{"name":"校内课程","slug":"校内课程","permalink":"http://example.com/categories/%E6%A0%A1%E5%86%85%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"校内课程","slug":"校内课程","permalink":"http://example.com/tags/%E6%A0%A1%E5%86%85%E8%AF%BE%E7%A8%8B/"}]},{"title":"post","slug":"3.27","date":"2023-03-27T15:39:55.000Z","updated":"2023-03-27T15:39:55.653Z","comments":true,"path":"2023/03/27/3.27/","link":"","permalink":"http://example.com/2023/03/27/3.27/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"recording","slug":"recording","date":"2023-03-25T02:20:01.000Z","updated":"2023-03-31T16:29:26.951Z","comments":true,"path":"2023/03/25/recording/","link":"","permalink":"http://example.com/2023/03/25/recording/","excerpt":"","text":"No matter what people perceive of me, I always shine through at the end of the day. So I’ve had a lot of people try to tear me down. But I’m here. And I’ve always been myself, and I’ve always wanted that, and I’ve been graceful, and I’ve tried to handle myself with as much class. And it’s only because I know how hard I work. And I’m not gonna let any of that get to me. 男人除了ljm都是shit，我要赚钱买一辆红色跑车，就要，法拉利。 Always ask yourself, “Are you doing your best?” 万木霜天红烂漫，天兵怒气重霄汉。 化逃避为平衡，跳出二元思维陷阱 阿尼玛和阿尼姆斯 二元性(人性和狼性) “你连舞都不想跳，怎么能说已经做出极大努力去生活呢。”——《荒原狼》(赫尔曼黑塞) 用幽默接受每一种人格","categories":[],"tags":[]},{"title":"网络编程","slug":"网络编程","date":"2023-03-23T09:39:53.000Z","updated":"2023-03-29T16:06:15.273Z","comments":true,"path":"2023/03/23/网络编程/","link":"","permalink":"http://example.com/2023/03/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/","excerpt":"","text":"(1)”key:value” (2)key&#x3D;[{},{},{}] 数组下标从0开始 （3）vscode可在右上… 处找到格式化 ctrl+Alt+b （4）\\n \\r \\n\\r 为换行，选择取决于json解释器 （5）&quot; 转义引号 socket是什么：代码库或接口层(介于内核和应用程序之间) IP：具体到电脑 端口：具体到进程 面向不同协议&#x3D;&#x3D;面向不同对象 协议：TCP ICMP UDP sock 数据结构tcp_sock (以inet_connection_sock()为基础，加入滑动窗口） 常用API：send() recv() bind() listen() connect() 由socket提供 对比前端——&gt;(API)——&gt;后端 进程——&gt;(socket)——&gt;内核 Linux:应用程序和内核 socket进程对比TCP 建立链接 connect(sock_fd,IP:port) 传输数据 缓冲区：链表 send(sock_fd,消息) recv(sock_fd) 将数据由缓冲区转移至应用程序 四元组：发送方IP，发送方port，接收方port,接收方IP 四元组——&gt;Hash函数——&gt; Hash Key TCP建立链接 传输数据","categories":[],"tags":[]},{"title":"informal essay","slug":"3-23","date":"2023-03-23T02:03:37.000Z","updated":"2023-03-23T02:12:41.304Z","comments":true,"path":"2023/03/23/3-23/","link":"","permalink":"http://example.com/2023/03/23/3-23/","excerpt":"","text":"jm好像，把他的头发剪短了。至少两边短了。我在四楼的北区，每天，都被图书馆的隔板遮挡视线。能不能某一天，坐在一起呢。我最近要控制体重了，早点下到99。他的blog很久没有更新了。 我最近喜欢上爵士乐，猫王的歌似乎刻在了我的灵魂中。“For I still recall the summer sun, through all winter rain”.","categories":[],"tags":[]},{"title":"要去的地方","slug":"要去的地方","date":"2023-03-21T08:17:27.000Z","updated":"2023-03-30T00:34:08.513Z","comments":true,"path":"2023/03/21/要去的地方/","link":"","permalink":"http://example.com/2023/03/21/%E8%A6%81%E5%8E%BB%E7%9A%84%E5%9C%B0%E6%96%B9/","excerpt":"","text":"比利时布鲁日 悬崖","categories":[],"tags":[]},{"title":"快捷键","slug":"快捷键","date":"2023-03-21T07:19:09.000Z","updated":"2023-04-02T02:54:59.128Z","comments":true,"path":"2023/03/21/快捷键/","link":"","permalink":"http://example.com/2023/03/21/%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"alt+F4 关闭页面 win+d 最小化 命令提示符import os os.system(‘cls’) pycharmctrl+d 复制一行 ctrl+shift+v 显示剪切板历史记录 Ctrl + Shift + F10 可以运行当前文件 Shift + F10 可以运行上一次运行的配置 Ctrl+Alt+F7 打开文件夹 Ctrl+slash 单行注释 Ctrl +slash +shift 多行注释 Ctrl + w 扩展代码选择 常规操作： Ctrl + S：保存文件 Ctrl + C：复制选中的文本 Ctrl + X：剪切选中的文本 Ctrl + V：粘贴文本 Ctrl + Z：撤销上一次操作 Ctrl + Shift + Z：重做上一次操作 Ctrl + F：查找文本 Ctrl + Shift + F：查找和替换文本 Ctrl + A：选中所有文本 Ctrl + D：复制当前行或选中的文本 Ctrl + Shift + U：将选中的文本转换为大写或小写 Ctrl + &#x2F;：注释或取消注释选中的代码 编辑器操作： Ctrl + Space：代码自动完成 Ctrl + Alt + L：格式化代码 Ctrl + Alt + O：优化导入语句 Ctrl + B：跳转到定义 Ctrl + Alt + B：跳转到实现 Ctrl + E：打开最近的文件 Ctrl + Shift + T：在当前编辑器中打开类的测试代码 Ctrl + Shift + F10：运行上次运行的程序 Ctrl + Shift + F9：调试上次运行的程序 项目导航： Alt + 1：打开&#x2F;关闭项目工具窗口 Alt + 4：打开&#x2F;关闭控制台窗口 Alt + 7：打开&#x2F;关闭结构视图窗口 Alt + F1：在项目工具窗口中显示当前文件 Ctrl + Shift + N：打开文件或目录 安装PyCharm：您可以从JetBrains官网上下载适合您操作系统的PyCharm版本，并按照安装向导进行安装。 创建新项目：启动PyCharm后，单击“Create New Project”按钮创建一个新项目。在弹出的“New Project”对话框中，设置项目名称和存储位置，并选择Python解释器。如果您的系统中已经安装了多个Python版本，请确保选择正确的解释器版本。单击“Create”按钮创建新项目。 创建新文件：在项目中创建新文件，可以使用右键单击项目名称，选择“New”-&gt;“Python File”命令，或者单击主菜单上的“File”-&gt;“New”-&gt;“Python File”命令。输入文件名并单击“OK”按钮创建新文件。 编写代码：在新文件中，您可以编写Python代码。如果您不熟悉Python语言，可以使用PyCharm的代码自动完成和语法检查功能。只需输入代码的一部分，PyCharm就会提供有关该代码的建议和自动完成选项。 运行代码：要运行Python代码，可以使用菜单上的“Run”-&gt;“Run”命令或按下Shift + F10键。PyCharm会自动检测代码中的错误并运行它。您可以在控制台窗口中查看代码的输出结果。 调试代码：如果您需要调试Python代码，可以使用菜单上的“Run”-&gt;“Debug”命令或按下Shift + F9键。这将启动调试器并允许您逐行执行代码，并查看代码的变量和数据结构的值。 版本控制：PyCharm还可以与版本控制系统（如Git和Subversion）集成，帮助您管理代码库并进行版本控制。您可以使用PyCharm的“VCS”菜单中的命令来执行版本控制操作，如拉取和提交代码更改。","categories":[],"tags":[]},{"title":"python学习","slug":"python学习","date":"2023-03-21T05:51:47.000Z","updated":"2023-03-30T02:31:27.984Z","comments":true,"path":"2023/03/21/python学习/","link":"","permalink":"http://example.com/2023/03/21/python%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"cs6b1（1）diagram Frames Objects （2）An environment is a sequence of frames. A frame is a binding between names and values. （3）Look for fitst in the local frame; second in the global frame. (4) pure functions: just return values non-pure functions: have side effects (5) &#x2F; 除 truediv(a,b) a&#x2F;b &#x2F;&#x2F; 整除 floordiv(a,b) a&#x2F;&#x2F;b (6) false value: False ,0,’ ‘,None true value: anything else (7)def search(f): x&#x3D;0 while True: if f(x): return x x+&#x3D;1 def inverse(f): return lambda y:search(lambda x:f(x)&#x3D;&#x3D;y) def square(x): return x**2 sqrt&#x3D;inverse(square) print(sqrt(4)) (8)def indentity(k): return k def cube(k): return pow(k,3) def summation(n,term): total,k&#x3D;0,1 while k&lt;&#x3D;n: total,k&#x3D;total+term(k),k+1 return total print(summation(5,cube))print(summation(5,indentity)) (9)higher-order function def make_adder(n): def adder(m): return 2*m+n return adder f&#x3D;make_adder(1)print(f(2)) (10) currying: Transforming a multi-argument function into a single-argument, higher-order function def curry2(f): def g(x): def h(y): return f(x,y) return h return g from operator import addm&#x3D;curry2(add) add_three&#x3D;m(3)add_two&#x3D;add_three(2)print(add_two) curry2&#x3D;lambda f: lambda x: lambda y: f(x,y)m1&#x3D;curry2(add)m(2)(3) print(m(2)(3)) (11)name: 1) meaning or purpose 2) documented in docstring 3) function effect(print), behavior(triple), return(abs) (12)cascade(the order of recursion) first type: def cascade(n): if n&lt;10: print(n) else: print(n) cascade(n&#x2F;&#x2F;10) print(n) second type: def cascade(n): print(n) if n&gt;&#x3D;10: cascade(n&#x2F;&#x2F;10) print(n) first type has typical structure, put the base case first inverse_cascade def inverse_cascade(n): grow(n) print(n) shrink(n) def f_then_g(f,g,n): if n: f(n) g(n) grow&#x3D;lambda n:f_then_g(grow,print,n&#x2F;&#x2F;10)shrink&#x3D;lambda n:f_then_g(print,shrink,n&#x2F;&#x2F;10) ooptypes:(1)Single Inheritance (2)Multiple Inheritance (3)Multilevel Inheritance (4)Hierarchical Inheritance (5)Hybrid Inheritance Data structurelist :append()加一个或者一个list insert(position,item) extend([]) tuple:+连接 列表推导式 [表达式 for 迭代变量 in 可迭代变量[if 条件表达式]]（list comprehension) 两层循环 [(x,y) for x in range(1,4) for y in range(1,5)] 运行时间： import time s_time&#x3D;time.perf_counter()demo1()e_time&#x3D;time.perf_counter() print(“运行时间：”,e_time-s_time) dictionary中不能有重复key，会覆盖","categories":[{"name":"cs学习","slug":"cs学习","permalink":"http://example.com/categories/cs%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"cs学习","slug":"cs学习","permalink":"http://example.com/tags/cs%E5%AD%A6%E4%B9%A0/"}]},{"title":"3.21","slug":"3-21","date":"2023-03-21T04:06:22.000Z","updated":"2023-03-21T07:27:37.744Z","comments":true,"path":"2023/03/21/3-21/","link":"","permalink":"http://example.com/2023/03/21/3-21/","excerpt":"","text":"很喜欢村上春树的文字，最喜欢且听风吟 simple but powerful “回家路上，我一直吹着口哨。这是一支不知在哪里听过的曲子，但名字却总也记不起来。是很久以前的老歌了。我把车停在海滨公路上，一面望着黑夜中的大海，一面竭力想那歌名。是《米老鼠俱乐部之歌》。歌词我想是这样的：我们大家喜欢的口令，MIC KEY MOUSE说不定真的算是不错的时代。” 且听风吟的歌单：米老鼠俱乐部之歌 佐治亚的雨夜","categories":[],"tags":[]},{"title":"贪心算法","slug":"贪心算法","date":"2023-03-15T10:05:48.000Z","updated":"2023-03-16T11:29:26.171Z","comments":true,"path":"2023/03/15/贪心算法/","link":"","permalink":"http://example.com/2023/03/15/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/","excerpt":"","text":"技巧#include &lt;bits/stdc++.h&gt; 万能头文件 区间选点#include&lt;iostream&gt; #include&lt;algorithm&gt; using namespace std; const int N=100010; struct node&#123; int l,r; &#125;range[N]; bool cmp(node a,node b) &#123; return a.r&lt;b.r; &#125; int main() &#123; int n;cin&gt;&gt;n; for(int i=0;i&lt;n;++i) &#123; scanf(&quot;%d %d&quot;,&amp;range[i].l,&amp;range[i].r); &#125; sort(range,range+n,cmp); int res=0,ed=-2e9; for(int i=0;i&lt;n;i++) &#123; if(range[i].l&gt;ed) &#123; res++; ed=range[i].r; &#125; &#125; cout&lt;&lt;res&lt;&lt;endl; &#125; 完全背包问题#include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N = 1010; int n, m; int v[N], w[N]; int f[N]; int main() &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i]; for (int i = 1; i &lt;= n; i ++ ) for (int j = v[i]; j &lt;= m; j ++ ) f[j] = max(f[j], f[j - v[i]] + w[i]); cout &lt;&lt; f[m] &lt;&lt; endl; return 0; &#125;","categories":[],"tags":[]},{"title":"3.15星期三","slug":"3-15星期三","date":"2023-03-15T06:06:18.000Z","updated":"2023-03-15T06:17:18.182Z","comments":true,"path":"2023/03/15/3-15星期三/","link":"","permalink":"http://example.com/2023/03/15/3-15%E6%98%9F%E6%9C%9F%E4%B8%89/","excerpt":"","text":"不知道说些什么，周三时间很充裕，应该好好学习。不过今天有点烦吧，昨天英语小测没带耳机，得了64，今天早上高数不会，物理实验小测得了60。 他也在图书馆，不知道为什么今天他的位置换了方向，是为了不看到我吗，应该是我想多了。 今天有体测，结束去健身房，然后回来刷leetcode。我要好好学习了吧，有点摆烂最近。 也许慢慢来，会接近他？（这句话可真ex）算了，打会音游。物理实验，让我的屁股着火（LOL）。 无所谓，我会用平面镜欣赏，我的美貌。","categories":[],"tags":[]},{"title":"动态规划","slug":"动态规划","date":"2023-03-14T07:20:51.000Z","updated":"2023-03-16T13:48:37.583Z","comments":true,"path":"2023/03/14/动态规划/","link":"","permalink":"http://example.com/2023/03/14/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","excerpt":"","text":"动态规划背包问题01背包二维#include&lt;bits/stdc++.h&gt; using namespace std; const int MAXN = 1005; int v[MAXN]; // 体积 int w[MAXN]; // 价值 int f[MAXN][MAXN]; // f[i][j], j体积下前i个物品的最大价值 int main() &#123; int n, m; cin &gt;&gt; n &gt;&gt; m; for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i]; for(int i = 1; i &lt;= n; i++) for(int j = 1; j &lt;= m; j++) &#123; // 当前背包容量装不进第i个物品，则价值等于前i-1个物品 if(j &lt; v[i]) f[i][j] = f[i - 1][j]; // 能装，需进行决策是否选择第i个物品 else f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i]); &#125; cout &lt;&lt; f[n][m] &lt;&lt; endl; return 0; &#125; 一维优化#include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N = 1010; int n, m; int v[N], w[N]; int f[N]; int main() &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i]; for (int i = 1; i &lt;= n; i ++ ) for (int j = m; j &gt;= v[i]; j -- ) f[j] = max(f[j], f[j - v[i]] + w[i]); cout &lt;&lt; f[m] &lt;&lt; endl; return 0; &#125; 完全背包#include&lt;iostream&gt; using namespace std; const int N = 1010; int f[N]; int v[N],w[N]; int main() &#123; int n,m; cin&gt;&gt;n&gt;&gt;m; for(int i = 1 ; i &lt;= n ;i ++) &#123; cin&gt;&gt;v[i]&gt;&gt;w[i]; &#125; for(int i = 1 ; i&lt;=n ;i++) for(int j = v[i] ; j&lt;=m ;j++) &#123; f[j] = max(f[j],f[j-v[i]]+w[i]); &#125; cout&lt;&lt;f[m]&lt;&lt;endl; &#125; 多重背包暴力解法 #include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N = 110; int n, m; int v[N], w[N], s[N]; int f[N][N]; int main() &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i]; for (int i = 1; i &lt;= n; i ++ ) for (int j = 0; j &lt;= m; j ++ ) for (int k = 0; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k ++ ) f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k); cout &lt;&lt; f[n][m] &lt;&lt; endl; return 0; &#125; 二进制优化法 #include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; const int N = 12010, M = 2010; int n, m; int v[N], w[N]; int f[M]; int main() &#123; cin &gt;&gt; n &gt;&gt; m; int cnt = 0; for (int i = 1; i &lt;= n; i ++ ) &#123; int a, b, s; cin &gt;&gt; a &gt;&gt; b &gt;&gt; s; int k = 1; while (k &lt;= s) &#123; cnt ++ ; v[cnt] = a * k; w[cnt] = b * k; s -= k; k *= 2; &#125; if (s &gt; 0) &#123; cnt ++ ; v[cnt] = a * s; w[cnt] = b * s; &#125; &#125; n = cnt; for (int i = 1; i &lt;= n; i ++ ) for (int j = m; j &gt;= v[i]; j -- ) f[j] = max(f[j], f[j - v[i]] + w[i]); cout &lt;&lt; f[m] &lt;&lt; endl; return 0; &#125; 分组背包#include&lt;iostream&gt; using namespace std; const int N = 110; int n,m; int f[N],s[N],v[N][N],w[N][N]; int main() &#123; cin&gt;&gt;n&gt;&gt;m; for(int i = 1;i &lt;= n;i ++) &#123; cin&gt;&gt;s[i]; for(int j = 0;j &lt; s[i];j++) &#123; cin&gt;&gt;v[i][j]&gt;&gt;w[i][j]; &#125; &#125; for(int i = 1;i &lt;= n;i ++) &#123; for(int j = m;j &gt;= 0;j --) &#123; for(int k = 0;k &lt; s[i];k ++) &#123; if(v[i][k]&lt;=j) &#123; f[j] = max(f[j],f[j-v[i][k]] + w[i][k]); &#125; &#125; &#125; &#125; printf(&quot;%d&quot;,f[m]); &#125; 线性DP数字三角形#include&lt;iostream&gt; #include&lt;cstring&gt; using namespace std; const int N = 510; int f[N][N],a[N][N];//状态表示方程 int n; int main() &#123; cin&gt;&gt;n; memset(f,0xcf,sizeof f); for(int i = 1;i &lt;= n;i ++) &#123; for(int j = 1;j &lt;= i;j ++) &#123; scanf(&quot;%d&quot;,&amp;a[i][j]); &#125; &#125; f[1][1] = a[1][1]; for(int i = 2;i &lt;= n;i ++) &#123; for(int j = 1;j &lt;= n;j ++) &#123; f[i][j] = max(f[i-1][j-1]+a[i][j],f[i-1][j]+a[i][j]); &#125; &#125; int res = -1e9; for(int i = 1;i &lt;= n;i ++) &#123; res = max(res,f[n][i]); &#125; printf(&quot;%d&quot;,res); &#125; 最长上升子序列//f[i] = max(f[j]+1,f[i]); #include&lt;iostream&gt; using namespace std; const int N = 1010; int n; int a[N],f[N]; int main() &#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i ++) scanf(&quot;%d&quot;,&amp;a[i]); for(int i = 1;i &lt;= n;i ++) &#123; f[i] = 1; for(int j = 1;j &lt; i;j ++) &#123; if(a[j] &lt; a[i]) &#123; f[i] = max(f[i],f[j] + 1); &#125; &#125; &#125; int res = 1; for(int i = 1;i &lt;= n;i ++) &#123; res = max(res,f[i]); &#125; printf(&quot;%d&quot;,res); &#125; 最长公共子序列#include&lt;iostream&gt; using namespace std; const int N = 1010; int n,m; char a[N],b[N]; int f[N][N]; int main() &#123; cin&gt;&gt;n&gt;&gt;m; cin&gt;&gt;a+1&gt;&gt;b+1; for(int i = 1;i &lt;= n;i ++) &#123; for(int j = 1;j &lt;= m;j ++) &#123; f[i][j] = max(f[i-1][j],f[i][j-1]); if(a[i] == b[j]) &#123; f[i][j] = max(f[i-1][j-1] + 1,f[i][j]); &#125; &#125; &#125; printf(&quot;%d&quot;,f[n][m]); return 0; &#125; 区间dp石子合并//区间dp #include&lt;iostream&gt; #include&lt;cstring&gt; using namespace std; const int N = 310; int n; int a[N],s[N]; int f[N][N]; int main() &#123; cin&gt;&gt;n; for(int i =1;i &lt;= n;i ++) &#123; scanf(&quot;%d&quot;,&amp;a[i]); s[i] = s[i-1] + a[i]; &#125; memset(f,0x3f,sizeof f); for(int i = 1;i &lt;=n;i ++) f[i][i] = 0; for(int len = 1;len &lt;= n;len ++) &#123; for(int i = 1;i + len -1 &lt;= n;i ++) &#123; int l = i, r = i + len -1; for(int k = l;k &lt; r;k ++) &#123; f[l][r] = min(f[l][r],f[l][k]+f[k+1][r] + s[r] - s[l-1] ); &#125; &#125; &#125; printf(&quot;%d&quot;,f[1][n]); &#125; 状态压缩蒙德里安的梦想#include&lt;iostream&gt; #include&lt;cstring&gt; #include&lt;vector&gt; #include&lt;algorithm&gt; using namespace std; const int N = 12,M = 1 &lt;&lt; N; long long f[N][M]; bool vis[M]; vector&lt;int&gt; state[M]; int n,m; int main() &#123; while(cin&gt;&gt;n&gt;&gt;m , n||m) &#123; //预处理1 for(int i = 0;i &lt; (1 &lt;&lt; n);i ++) &#123; int cnt = 0; bool is_valid = true; for(int j = 0;j &lt; n;j ++) &#123; if((i &gt;&gt; j )&amp; 1 ) &#123; if(cnt &amp; 1) &#123; is_valid = false; break; &#125; cnt = 0; &#125;else &#123; cnt ++; &#125; &#125; if( cnt &amp; 1 ) &#123; is_valid = false; &#125; vis[i] = is_valid; &#125; //预处理2 for(int j = 0; j &lt; (1 &lt;&lt; n);j ++) &#123; state[j].clear(); for(int k = 0; k &lt; (1 &lt;&lt; n);k ++) &#123; if((j &amp; k) == 0 &amp;&amp; vis[j | k]) &#123; state[j].push_back(k); &#125; &#125; &#125; //dp memset(f,0,sizeof f); f[0][0] = 1; for(int i = 1;i &lt;= m;i ++) &#123; for(int j = 0;j &lt; (1 &lt;&lt; n);j ++) &#123; for(auto k : state[j]) &#123; f[i][j] += f[i-1][k]; &#125; &#125; &#125; cout&lt;&lt;f[m][0]&lt;&lt;endl; &#125; &#125; 最短Hamilton路径#include&lt;iostream&gt; #include&lt;cstring&gt; #include&lt;algorithm&gt; using namespace std; const int N = 21, M = 1 &lt;&lt; N; int w[N][N],f[M][N]; int n; int main() &#123; cin&gt;&gt;n; for(int i = 0;i &lt; n;i ++) &#123; for(int j = 0;j &lt; n;j ++) &#123; scanf(&quot;%d&quot;,&amp;w[i][j]); &#125; &#125; memset(f,0x3f,sizeof f); f[1][0] = 0; for(int i = 0;i &lt; (1 &lt;&lt; n);i ++) &#123; for(int j = 0;j &lt; n;j ++) &#123; if((i &gt;&gt; j) &amp; 1) &#123; for(int k = 0;k &lt; n;k ++) &#123; if((i - (1 &lt;&lt; j)) &gt;&gt; k &amp; 1) &#123; f[i][j] = min(f[i][j],f[i - (1 &lt;&lt; j)][k] + w[k][j]); &#125; &#125; &#125; &#125; &#125; cout&lt;&lt;f[(1 &lt;&lt; n) - 1][n - 1]&lt;&lt; endl; &#125; 树状dp没有上司的舞会 记忆化搜索滑雪#include&lt;iostream&gt; #include&lt;algorithm&gt; #include&lt;cstring&gt; using namespace std; const int N=310; int f[N][N],g[N][N]; int n,m; int dx[4]=&#123;-1,0,1,0&#125;,dy[4]=&#123;0,-1,0,1&#125;; int dp(int x,int y) &#123; int &amp;v=f[x][y]; if(v!=-1)return v; v=1; for(int i=0;i&lt;4;i++) &#123; int a=x+dx[i],b=y+dy[i]; if(a&gt;=1&amp;&amp;a&lt;=n&amp;&amp;b&gt;=1&amp;&amp;b&lt;=m&amp;&amp;g[x][y]&gt;g[a][b]) v=max(v,dp(a,b)+1); &#125; return v; &#125; int main() &#123; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) cin&gt;&gt;g[i][j]; memset(f,-1,sizeof f); int res=0; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) res=max(res,dp(i,j)); printf(&quot;%d&quot;,res); &#125;","categories":[],"tags":[]},{"title":"Cinnamon生活随笔","slug":"Cinnamon生活随笔","date":"2023-03-14T05:42:48.000Z","updated":"2023-03-14T05:54:57.897Z","comments":true,"path":"2023/03/14/Cinnamon生活随笔/","link":"","permalink":"http://example.com/2023/03/14/Cinnamon%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/","excerpt":"","text":"写在大一下 我感觉北邮的生活还是一如既往的单调，却因为你的出现让生活有了期待。 我喜欢计算机，编程，算法，想做一名极客，也想和你一起进步。 ”大雾重重 时代喧哗造物忙 火光汹汹 指引盗寇入太行“。其实我还不太明白，只是知道你喜欢。 我不想追，慢慢来，顺心而为。 这个Blog来记录学习过程和大学生活，以及我暗恋的你。","categories":[],"tags":[]},{"title":"我的·第一篇博客","slug":"我的·第一篇博客","date":"2023-03-14T04:09:33.000Z","updated":"2023-03-14T05:12:29.794Z","comments":true,"path":"2023/03/14/我的·第一篇博客/","link":"","permalink":"http://example.com/2023/03/14/%E6%88%91%E7%9A%84%C2%B7%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"简介这是我的第一篇Hexo 博客文章","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"ljy","slug":"hello-world","date":"2023-03-08T08:42:25.570Z","updated":"2023-03-23T02:12:01.293Z","comments":true,"path":"2023/03/08/hello-world/","link":"","permalink":"http://example.com/2023/03/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"校内课程","slug":"校内课程","permalink":"http://example.com/categories/%E6%A0%A1%E5%86%85%E8%AF%BE%E7%A8%8B/"},{"name":"cs学习","slug":"cs学习","permalink":"http://example.com/categories/cs%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"},{"name":"校内课程","slug":"校内课程","permalink":"http://example.com/tags/%E6%A0%A1%E5%86%85%E8%AF%BE%E7%A8%8B/"},{"name":"cs学习","slug":"cs学习","permalink":"http://example.com/tags/cs%E5%AD%A6%E4%B9%A0/"},{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]}